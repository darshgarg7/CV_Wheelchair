name: Scalable CI/CD Pipeline with Docker Integration

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # Build and Test Job (Static Analysis, Linting, Unit & Integration Tests)
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.12']
    steps:
      - name: Checkout repository code
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          pip install --upgrade pip setuptools wheel
          pip install -r requirements.txt
          docker --version

      - name: Run static code analysis and linting
        run: |
          pip install flake8 black
          flake8 .
          black --check .

      - name: Run unit and integration tests with coverage
        run: |
          pip install pytest pytest-cov
          pytest --cov=.

      - name: Build Docker image
        run: |
          docker buildx create --use
          docker buildx build --tag ghcr.io/${{ github.repository_owner }}/cv_wheelchair:latest --push .

      - name: Test Docker image in container
        run: |
          docker run --rm ghcr.io/${{ github.repository_owner }}/cv_wheelchair:latest python -m pytest --cov=.

  # Deployment Job
  deploy:
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - name: Set up environment variables for deployment
        run: |
          echo "STAGING_ENV=${{ secrets.STAGING_ENV }}" >> $GITHUB_ENV
          echo "PROD_ENV=${{ secrets.PROD_ENV }}" >> $GITHUB_ENV

      - name: Authenticate to GitHub Container Registry
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io --username "${{ github.repository_owner }}" --password-stdin

      - name: Deploy Docker image to Staging
        run: |
          docker pull ghcr.io/${{ github.repository_owner }}/cv_wheelchair:latest
          echo "Deploying to Staging environment (${{ secrets.STAGING_ENV }})"
          # Add your actual deployment commands for Staging here (e.g., kubectl, SSH commands, etc.)

      - name: Verify staging deployment
        run: |
          echo "Verifying staging deployment"
          # Add your actual verification logic here (e.g., health checks, curl requests to staging)

      - name: Promote to production (auto or manual)
        if: success()
        run: |
          echo "Promoting to Production environment (${{ secrets.PROD_ENV }})"
          # Add your production promotion commands here (e.g., kubectl, SSH commands, etc.)

  # Notification Job
  notify:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Notify Slack of deployment success
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        with:
          message: |
            âœ… **Deployment Complete**
            - Repository: ${{ github.repository }}
            - Branch: ${{ github.ref_name }}
            - Commit: ${{ github.sha }}
            - Staging URL: ${{ secrets.STAGING_URL }}
            - Production URL: ${{ secrets.PROD_URL }}

      - name: Send email notification to stakeholders
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          to: ${{ secrets.EMAIL_RECIPIENTS }}
          subject: "Deployment Success: CV_Wheelchair"
          body: |
            The deployment for **CV_Wheelchair** has been successfully completed.
            - Commit: ${{ github.sha }}
            - Branch: ${{ github.ref_name }}
            - Deployment to Staging: Succeeded
            - Deployment to Production: Succeeded

  # Rollback Job
  rollback:
    runs-on: ubuntu-latest
    if: failure()  # This job runs only if the deployment job fails
    steps:
      - name: Rollback to previous stable version
        run: |
          echo "Rolling back to previous stable version"
          # Add your rollback logic here (e.g., revert Docker tags, restore backups, etc.)
