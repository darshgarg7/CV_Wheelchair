name: Scalable CI/CD Pipeline with Docker Integration

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # Build and Test Job (Static Analysis, Linting, Unit & Integration Tests)
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.12']  # Ensures compatibility with the latest Python version
    steps:
      - name: Checkout repository code
        uses: actions/checkout@v3  # Ensures the repository code is available for subsequent steps

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}  # Configures Python version for consistency across environments

      - name: Install dependencies
        run: |
          pip install --upgrade pip setuptools wheel  # Updates package management tools to avoid version conflicts
          pip install -r requirements.txt  # Installs all necessary dependencies for the project
          pip install tensorflow boto3  # Installs additional dependencies needed for TensorFlow and AWS interaction
          docker --version  # Verifies Docker installation for containerized builds

      - name: Run static code analysis and linting
        run: |
          pip install flake8 black  # Ensures consistent code style with flake8 for linting and black for automatic formatting
          flake8 .  # Runs linting to catch any style issues or potential bugs
          black --check .  # Verifies code is formatted according to black style guide

      - name: Run unit and integration tests with coverage
        run: |
          pip install pytest pytest-cov  # Installs testing dependencies
          pytest --cov=.  # Executes tests to ensure that the code is well-covered and functions correctly

      - name: Build Docker image
        run: |
          docker buildx create --use  # Uses Docker's buildx to enable advanced build capabilities (e.g., multi-platform support)
          docker buildx build --tag ghcr.io/${{ github.repository_owner }}/cv_wheelchair:latest --push .  # Builds the Docker image and pushes it to GitHub Container Registry for version control

      - name: Test Docker image in container
        run: |
          docker run --rm ghcr.io/${{ github.repository_owner }}/cv_wheelchair:latest python -m pytest --cov=.  # Verifies Docker image integrity by running tests inside the container

  # Deployment Job
  deploy:
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - name: Set up environment variables for deployment
        run: |
          echo "STAGING_ENV=${{ secrets.STAGING_ENV }}" >> $GITHUB_ENV  # Sets up staging environment variables securely
          echo "PROD_ENV=${{ secrets.PROD_ENV }}" >> $GITHUB_ENV  # Sets up production environment variables securely

      - name: Authenticate to GitHub Container Registry
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io --username "${{ github.repository_owner }}" --password-stdin  # Authenticates Docker to access private GitHub Container Registry

      - name: Deploy Docker image to Staging
        run: |
          docker pull ghcr.io/${{ github.repository_owner }}/cv_wheelchair:latest  # Pulls the latest image from the registry
          echo "Deploying to Staging environment (${{ secrets.STAGING_ENV }})"
          kubectl apply -f deployment/staging-deployment.yaml  # Apply Kubernetes configuration for the staging environment
          kubectl set image deployment/cv-wheelchair cv_wheelchair=ghcr.io/${{ github.repository_owner }}/cv_wheelchair:latest  # Update container image in staging deployment

      - name: Verify staging deployment
        run: |
          echo "Verifying staging deployment"
          curl -f http://staging.example.com/health || exit 1  # Performs a health check by calling the /health endpoint of staging app

      - name: Save and upload model to S3
        run: |
          python -c "
          import tensorflow as tf; 
          from deployment_utils import save_model_for_serving; 
          model = tf.keras.models.Sequential([tf.keras.layers.Dense(1, input_dim=1)])  # Example model; replace with actual model
          save_model_for_serving(model, 'cv_wheelchair', s3_bucket='${{ secrets.S3_BUCKET_NAME }}')"  # Uploads model for use in production

      - name: Promote to production (auto or manual)
        if: success()  # Promotes deployment only if the staging deployment is successful
        run: |
          echo "Promoting to Production environment (${{ secrets.PROD_ENV }})"
          kubectl apply -f deployment/production-deployment.yaml  # Apply Kubernetes configuration for production
          kubectl set image deployment/cv-wheelchair cv-wheelchair=ghcr.io/${{ github.repository_owner }}/cv_wheelchair:latest  # Update container image in production deployment

  # Notification Job
  notify:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Send email notification to stakeholders
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.EMAIL_USERNAME }}  # Uses secure email credentials from GitHub secrets
          password: ${{ secrets.EMAIL_PASSWORD }}  # Uses secure email credentials from GitHub secrets
          to: darsh.garg@gmail.com  # Sends email to my email address
          subject: "Deployment Success: CV_Wheelchair"
          body: |
            The deployment for **CV_Wheelchair** has been successfully completed.
            - Commit: ${{ github.sha }}
            - Branch: ${{ github.ref_name }}
            - Deployment to Staging: Succeeded
            - Deployment to Production: Succeeded

  # Rollback Job
  rollback:
    runs-on: ubuntu-latest
    if: failure()  # This job runs only if the deployment job fails
    steps:
      - name: Rollback to previous stable version
        run: |
          echo "Rolling back to previous stable version"  # Placeholder for rollback logic
          kubectl set image deployment/cv-wheelchair cv-wheelchair=ghcr.io/${{ github.repository_owner }}/cv_wheelchair:mycontainerimage:1.0  # Rollback to a previous stable image tag
